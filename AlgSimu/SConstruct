'''
 *  $Id: SConstruct, 2014-09-24 15:07:43 DAMPE $
 *----------------------------------------------------------
 *  This file is generated by dmpsw-expand
 *----------------------------------------------------------
'''

import os

target='DmpSimAlg'

print "---> compiling: %s\n" % target
#--------------------------------------------------------------------
# environment
env = Environment(ENV = os.environ)
env.ParseConfig("dmpsw-config --include --libs")
env.ParseConfig("python-config --include --libs")
env.ParseConfig("root-config --cflags --libs")
#env.ParseConfig("clhep-config --include --libs")
env.PrependENVPath('PATH', os.environ['G4INSTALL']+'/../../../bin')    # 2 lines for G4
env.ParseConfig("geant4-config --cflags --libs")
#env.MergeFlags('-fopenmp')

#-------------------------------------------------------------------
# include dir. and external libs
XercesPath=os.environ['XERCESCROOT']
env.Prepend(CPPPATH=['./include'])
env.Append(LIBS=['DmpEvtSim'])   # link your event module, only for algorithm
env.Prepend(LIBPATH=[XercesPath+'/lib'])
env.Append(LIBS=['xerces-c'])
env.Append(LIBPATH=['/opt/boost/lib'])
env.Append(LIBS=['boost_system','boost_python','boost_filesystem'])

#-------------------------------------------------------------------
prefix=os.environ['DMPSWWORK']
# install geometry
def ProcessThisDir(fromPath,toPath):
    for tmp in os.listdir(fromPath):
        if "." in tmp[0] or "scons" in tmp or "test" in tmp:   continue
        if os.path.isdir(fromPath+tmp):  ProcessThisDir(fromPath+tmp,toPath+tmp)
        else: Default(Command(toPath+'/'+tmp,fromPath+'/'+tmp,Copy("$TARGET","$SOURCE")))

ProcessThisDir("../Geometry/BTOctober2014",prefix+'/share/Geometry/BTOctober2014')
ProcessThisDir("../Geometry/Orbit",prefix+'/share/Geometry/Orbit')
ProcessThisDir("./share",prefix+'/share/Simulation')
# install Vis.mac
#Default(Command(prefix+'/share/Simulation/DmpSimGUI.mac','./share/DmpSimGUI.mac',Copy("$TARGET","$SOURCE")))
#Default(Command(prefix+'/share/Simulation/DmpSimVis.mac','./share/DmpSimVis.mac',Copy("$TARGET","$SOURCE")))
#Default(Command(prefix+'/share/Simulation/AttPar','./share/AttPar',Copy("$TARGET","$SOURCE")))
#Default(Command(prefix+'/share/Simulation/DyPar','./share/DyPar',Copy("$TARGET","$SOURCE")))
#Default(Command(prefix+'/share/Simulation/PedPar','./share/PedPar',Copy("$TARGET","$SOURCE")))
#Default(Command(prefix+'/share/Simulation/MIPsPar','./share/MIPsPar',Copy("$TARGET","$SOURCE")))

#-------------------------------------------------------------------
# main build
goal=env.SharedLibrary(target,Glob('./src/*.cc'))
Default(env.InstallAs(prefix+'/lib/lib'+target+".so",goal))
if env['PLATFORM'] == 'darwin':    #MacOS
	Default(env.InstallAs(prefix+'/lib/lib'+target+".dylib",goal))

